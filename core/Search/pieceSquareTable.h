#ifndef PIECESQUARETABLE_H
#define PIECESQUARETABLE_H

#include <array>

constexpr std::array<int, 64> flipTable(const int *table)
{
    std::array<int, 64> flippedTable{};
    for (int i = 0; i < 64; i++)
    {
        flippedTable[i] = table[63 - i];
    }
    return flippedTable;
}

namespace PSQT
{

    // Note that these values are from white's perspective
    // clang-format off
    constexpr int psq[][64] = {
                            {0}, // Empty
                            {  0,   0,   0,   0,   0,   0,   0,   0,  // Pawns
                              50,  50,  50,  50,  50,  50,  50,  50,
                              10,  10,  20,  30,  30,  20,  10,  10,
                               5,   5,  10,  25,  25,  10,   5,   5,
                               0,   0,   0,  20,  20,   0,   0,   0,
                               5,  -5, -10,   0,   0, -10,  -5,   5,
                               5,  10,  10, -20, -20,  10,  10,   5,
                               0,   0,   0,   0,   0,   0,   0,   0},

                            {-50, -40, -30, -30, -30, -30, -40, -50,  // Knights
                             -40, -20,   0,   0,   0,   0, -20, -40,
                             -30,   0,  10,  15,  15,  10,   0, -30,
                             -30,   5,  15,  20,  20,  15,   5, -30,
                             -30,   0,  15,  20,  20,  15,   0, -30,
                             -30,   5,  10,  15,  15,  10,   5, -30,
                             -40, -20,   0,   5,   5,   0, -20, -40,
                             -50, -40, -30, -30, -30, -30, -40, -50},

                            {-20, -10, -10, -10, -10, -10, -10, -20,  // Bishops
                             -10,   0,   0,   0,   0,   0,   0, -10,
                             -10,   0,   5,  10,  10,   5,   0, -10,
                             -10,   5,   5,  10,  10,   5,   5, -10,
                             -10,   0,  10,  10,  10,  10,   0, -10,
                             -10,  10,  10,  10,  10,  10,  10, -10,
                             -10,   5,   0,   0,   0,   0,   5, -10,
                             -20, -10, -10, -10, -10, -10, -10, -20},

                            {  0,   0,   0,   0,   0,   0,   0,   0,  // Rooks
                               5,  10,  10,  10,  10,  10,  10,   5,
                              -5,   0,   0,   0,   0,   0,   0,  -5,
                              -5,   0,   0,   0,   0,   0,   0,  -5,
                              -5,   0,   0,   0,   0,   0,   0,  -5,
                              -5,   0,   0,   0,   0,   0,   0,  -5,
                              -5,   0,   0,   0,   0,   0,   0,  -5,
                               0,   0,   0,   5,   5,   0,   0,   0},

                            {-20, -10, -10,  -5,  -5, -10, -10, -20,  // Queens
                             -10,   0,   0,   0,   0,   0,   0, -10,
                             -10,   0,   5,   5,   5,   5,   0, -10,
                              -5,   0,   5,   5,   5,   5,   0,  -5,
                               0,   0,   5,   5,   5,   5,   0,  -5,
                             -10,   5,   5,   5,   5,   5,   0, -10,
                             -10,   0,   5,   0,   0,   0,   0, -10,
                             -20, -10, -10,  -5,  -5, -10, -10, -20},

                            {-30, -40, -40, -50, -50, -40, -40, -30,  // Kings
                             -30, -40, -40, -50, -50, -40, -40, -30,
                             -30, -40, -40, -50, -50, -40, -40, -30,
                             -30, -40, -40, -50, -50, -40, -40, -30,
                             -20, -30, -30, -40, -40, -30, -30, -20,
                             -10, -20, -20, -20, -20, -20, -20, -10,
                              20,  20,   0,   0,   0,   0,  20,  20,
                              20,  30,  10,   0,   0,  10,  30,  20}
                            };
    
}

#endif